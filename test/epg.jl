function compare_epg(
    work‚ÇÅ::DECAES.AbstractEPGWorkspace{T},
    work‚ÇÇ::DECAES.AbstractEPGWorkspace{T};
    verbose = false,
) where {T}
    xs = (; Œ± = T(11e-3), TE = T(39e-3), T2 = T(1.1), T1 = T(151.0), Œ≤ = T(163.0))
    Œ∏‚ÇÅ = DECAES.EPGOptions((; ETL = DECAES.echotrainlength(work‚ÇÅ), xs...))
    Œ∏‚ÇÇ = DECAES.EPGOptions((; ETL = DECAES.echotrainlength(work‚ÇÇ), xs...))
    dc‚ÇÅ = DECAES.EPGdecaycurve!(work‚ÇÅ, Œ∏‚ÇÅ)
    dc‚ÇÇ = DECAES.EPGdecaycurve!(work‚ÇÇ, Œ∏‚ÇÇ)
    if verbose && !(dc‚ÇÅ ‚âà dc‚ÇÇ)
        @info "Comparing: $((nameof(typeof(work‚ÇÅ)), nameof(typeof(work‚ÇÇ))))"
        @info "    max error:   $(maximum(abs, dc‚ÇÅ .- dc‚ÇÇ))"
        @info "    diff vector: $(abs.(dc‚ÇÅ .- dc‚ÇÇ)')"
    end
    @test isapprox(dc‚ÇÅ, dc‚ÇÇ; rtol = ‚àöeps(T), atol = 10 * eps(T))
end

function test_EPG_algorithms()
    # In principle ETL testing range need not be too large (only need to test four ETL values >=4 which are unique mod 4),
    # but since this file is also used for app precompilation, we should sweep over ETL values we expect to see in practice
    # for the default algorithm.
    #   NOTE: Generated function approach is extremely slow to compile for large ETL (around 16)
    epg_algs = DECAES.EPG_Algorithms
    for T in [Float32, Float64]
        for i in 1:length(epg_algs), ETL in [4, 5, 6, 7]
            j = rand([1:i-1; i+1:length(epg_algs)])
            alg·µ¢, alg‚±º = epg_algs[i], epg_algs[j]
            compare_epg(alg·µ¢(T, ETL), alg‚±º(T, ETL))
        end
        for ETL in 4:64
            alg = DECAES.EPGdecaycurve_work(T, ETL)
            compare_epg(alg, alg)
        end
    end
end

function test_EPGOptions()
    Œ∏ = DECAES.EPGOptions((; ETL = 10, Œ± = 169.0, TE = 9.0e-3, T2 = 10.1e-3, T1 = 0.98, Œ≤ = 176.0))

    @testset "basics" begin
        @test Tuple(Œ∏) == (10, 169.0, 9.0e-3, 10.1e-3, 0.98, 176.0)
        @test NamedTuple(Œ∏) == (; ETL = 10, Œ± = 169.0, TE = 9.0e-3, T2 = 10.1e-3, T1 = 0.98, Œ≤ = 176.0)
    end

    @testset "destructure/restructure" begin
        @test @allocated(DECAES.restructure(Œ∏, (2.0, 1.0), Val((:T1, :TE)))) == 0
        @test @allocated(DECAES.destructure(Œ∏, Val((:T2, :ETL)))) == 0

        Œ∏‚Ä≤ = DECAES.restructure(Œ∏, (2.0, 1.0), Val((:Œ≤, :Œ±)))
        @test Tuple(Œ∏‚Ä≤) == (Œ∏.ETL, 1.0, Œ∏.TE, Œ∏.T2, Œ∏.T1, 2.0)

        x‚Ä≤ = DECAES.destructure(Œ∏, Val((:TE, :Œ±)))
        @test x‚Ä≤ == SA[Œ∏.TE, Œ∏.Œ±]
    end
end

function test_EPGFunctor()
    T = Float64
    ETL = 8
    Œ∏ = DECAES.EPGOptions((; ETL, Œ± = 169.0, TE = 9.0e-3, T2 = 10.1e-3, T1 = 0.98, Œ≤ = 176.0))
    fun! = DECAES.EPGFunctor(Œ∏, Val((:Œ±, :T2)))
    jac! = DECAES.EPGJacobianFunctor(Œ∏, Val((:Œ±, :T2)))

    # EPGFunctor
    x = [Œ∏.Œ±, Œ∏.T2]
    y = zeros(T, ETL)
    @test @allocated(fun!(y, x)) > 0 # Dual cache created on first call
    @test @allocated(fun!(y, x)) == 0 # Dual cache reused on second call
    @test y == DECAES.EPGdecaycurve(Œ∏)

    # EPGJacobianFunctor
    y .= 0
    J = zeros(T, ETL, 2)
    @test @allocated(jac!(y, Œ∏)) > 0 # Dual cache created on first call
    @test @allocated(jac!(J, y, Œ∏)) == 0 # Dual cache reused on second call
    @test y ‚âà DECAES.EPGdecaycurve(Œ∏) atol = 10 * eps(T) # note: not exact because Dual's likely lead to different SIMD instructions etc.
    @test J == DECAES.DiffResults.jacobian(jac!.res)

    # Finite difference test; error should decrease as ùí™(Œ¥x^2)
    Œ¥x = x .* T(1e-2)
    Œ∏‚Ä≤ = DECAES.restructure(Œ∏, x .+ Œ¥x, Val((:Œ±, :T2)))
    @test J * Œ¥x ‚âà DECAES.EPGdecaycurve(Œ∏‚Ä≤) - y atol = 5e-4

    Œ¥x = x .* T(1e-4)
    Œ∏‚Ä≤ = DECAES.restructure(Œ∏, x .+ Œ¥x, Val((:Œ±, :T2)))
    @test J * Œ¥x ‚âà DECAES.EPGdecaycurve(Œ∏‚Ä≤) - y atol = 5e-8

    Œ¥x = x .* T(1e-6)
    Œ∏‚Ä≤ = DECAES.restructure(Œ∏, x .+ Œ¥x, Val((:Œ±, :T2)))
    @test J * Œ¥x ‚âà DECAES.EPGdecaycurve(Œ∏‚Ä≤) - y atol = 5e-12
end

@testset "EPG algorithms" test_EPG_algorithms()
@testset "EPGOptions" test_EPGOptions()
@testset "EPGFunctor" test_EPGFunctor()

nothing
